class Solution {
    /*
    # 문제 이해
    도미노, 트로미노 타일을 이용하여 2 * n 사각형을 만들어야 한다
    사각형을 만들 수 있는 경우의 수를 반환한다

    # 풀이 접근
    큰 사각형 경우의 수는 작은 사각형 이전 경우의 수에서 추가된 형태이다
    DP로 풀 수 있을 거 같다
    
    결과가 매우 크다고 했다 
    -> 모든 경우의 수를 구하는 방식으로는 안됨
    -> 이 경우에도 DP가 적절하다

    Example1이 타일로 만들 수 있는 모든 경우의 수이다
    미완성된 사각형을 완성된 사각형으로 바꾸면 된다
    미완성된 사각형은 2*2에서 몇개의 타일이 빠진 경우이다
    - 가로로 된 도미노 타일
    - 트로미노 타일

    # 구현 스텝
    1. 모든 미완성 타일 경우의 수가 만들어질 수 있는 2 * 3까지 초기화한다
    2. n까지 이전 미완성 타일 -> 완성된 타일로 완성시킨다
        시키면서 경우의 수를 카운팅한다
    3. n일 떄의 경우의 수를 반환한다

    ---

    오른쪽 위, 오른쪽 아래만 비어있는 모양은 트로미노로만 만들 수 있는 건 아니다
    오른쪽 위만 비어 있는 모양에서 도미노 타일을 두면 오른쪽 아래만 비어 있는 모양이 된다
    */
    public int numTilings(int n) {
        // dp: 전체가 채워진 경우
        long[] dp = new long[1000 + 1];
        // up: 위만 채워진 경우
        long[] up = new long[1000 + 1];
        // down: 아래만 채워진 경우
        long[] down = new long[1000 + 1];
        
        dp[0] = 1;
        dp[1] = 1;

        for (int i = 2; i <= n; i++) {
            dp[i] = dp[i - 2] + dp[i - 1] + up[i - 1] + down[i - 1];
            up[i] = down[i - 1] + dp[i - 2];
            down[i] = up[i - 1] + dp[i - 2];

            dp[i] %= 1_000_000_007;
        }

        return (int) dp[n];
    }
}
