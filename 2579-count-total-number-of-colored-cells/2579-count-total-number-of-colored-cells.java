class Solution {
    /*
    # 문제 이해
    무한히 증가하는 grid가 존재한다
    분마다 grid는 증가하는데, n분에 grid의 Cell 개수를 반환해야 한다

    # 접근
    - n = 10^5까지 될 수 있다 고로 long으로 반환해야 한다
    - 어떤 규칙이 존재할 것 같다 수학적인 문제 느낌, 공식을 찾아보자

    n = 1, 1
    n = 2, 1 + 4 = 5
    n = 3, 1 + 4 + 8 = 13
    n = 4, 1 + 4 + 8 + 12 = 25
    n = 5, 1 + 4 + 8 + 12 + 
    숫자 증가는 1 -> 5 -> 13 -> 25
    추가되는 숫자는 -> 1 -> 4 -> 8 -> 13

    - 양 사이드로 추가되는 4는 항상 추가되어야 한다
    - 내부에 사각형이 증가할수록 1 -> 2 -> 3 -> 이런 식으로 늘어난다
        n = 2, 0
        n = 3, 1
        n = 4, 2
        증가할 때마다 사각형이 4개이므로 a * 4 만큼 추가된다
    
    # 구현 스텝
    - 2 -> n까지 순회하면서 위 규칙대로 값을 추가한다
        - 1은 항상 1, 최소 값이 1이고 1은 규칙이 없으므로
    - 결과를 반환한다

    # 최적화
    4 + (x - 2) * 4
    = (x - 1) * 4 가 된다
    이 이 값을 n까지 더할 것이므로 
    (2 - 1) * 4 + (3 - 1) * 4 + (4 - 1) * 4 .. 이런 식으로 추가된다
    (2부터 n까지의 합) * 4 - (n - 1) * 4가 된다
    
    여기서 (2부터 n까지의 합)을 (1부터 n까지의 합) 바꿀 수 있다 
    (1부터 n까지의 합) * 4 - n * 4

    그렇게 되면 (1부터 n까지의 합) * 4 - n * 4
        = n * (n + 1) / 2 * 4 - n * 4
        = n * (n + 1) * 2 - n * 4
        = 2(n^2 + n) - 4n
        = 2n^2 - 2n
        = 2n(n - 1)
    
    첫 시작 값이 1이므로 2n(n - 1) + 1
    */
    public long coloredCells(int n) {
        return 2L * n * (n - 1) + 1;
    }
}
